problem stat - remove k digits such that the number becomes the smallest possible
Code - 

from collections import Counter
class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        if num == "0":
            return "0"
        if len(num)==1 and k>= 1:
            return "0"
        nums_list = [int(x) for x in num]
        # if nums_list[1] == 0:
        #     flag = True
        #     i = 0
        #     try:
        #         while flag:
        #             del nums_list[i]
        #             k -= 1
        #             i += 1
        #             if nums_list[i] == 0:
        #                 flag = True
        #             else:
        #                 flag = False
        #     except:
        #         return "0"
        # # sorted_nums_list = sorted(nums_list)
        # # print(nums_list, sorted_nums_list)
        # # for idx,el in enumerate(nums_list):
        # #     if el == sorted_nums_list[0]:
        # #         # del sorted_nums_list[idx]
        # #         del sorted_nums_list[0]
        # #         continue
        # #     else:
        # #         if k == 0:
        # #             break
        # #         else:
        # #             k -= 1
        # #             nums_list_copy.remove(el)
        # # print(nums_list_copy, 'nums list copy', k)
        # # r =  "".join([str(x) for x in nums_list_copy])
        # # if k != 0:
        # #     r = num[:len(r)-k]
        # # if len(r) > 1:
        # #     r = r.lstrip('0')
        # # return r if len(r) > 0 else "0"
        # removed_nums = []
        # try:
        #     i = 0
        #     while k > 0:
        #         if nums_list[i] > sorted(nums_list[i+1:])[-1]:
        #             print(i, 'k', k)
        #             del nums_list[i]
        #             k -= 1
        #             i -= 1
        #         else:
        #             i += 1
        #             print(i, len(nums_list))
        #             # if i != len(nums_list) -1 and nums_list[i]==max(nums_list) and k != 0:
        #             #     del nums_list[i]
        #             #     k -= 1
        #             #     i -= 1
        #             if i == len(nums_list)-1:
        #                 i = 0
        #                 m = max(nums_list)
        #                 nums_list.remove(m)
        #                 removed_nums = [m] + removed_nums
        #                 print(nums_list)
        # except Exception as e:
        #     print(e)
        #     print('here', k)
        #     pass
        # print('in the end', nums_list, removed_nums, k)
        # return "".join([str(x) for x in nums_list + removed_nums[:len(removed_nums)-k]]).lstrip('0')
        stack = []
        to_remove = []
        for idx,num in enumerate(nums_list):
            if len(stack) == 0:
                stack.append(num)
                continue
            if num > stack[-1]:
                stack.append(num)
            else:
                try:
                    while k>0 and num < stack[-1] :
                        t = stack.pop()
                        to_remove.append(t)
                        k -= 1
                    stack.append(num)
                except:
                    stack.append(num)
                    pass
        # print('nl', nums_list)
        # res = []
        # for n in nums_list:
        #     if to_remove and n == to_remove[0]:
        #         del to_remove[0]
        #         continue
        #     res = [n] + res
        #     print('res', res)
        # print('nums_list', nums_list, res)
        if k > 0:
            stack = stack[:len(stack)-k]
        return "".join([str(el) for el in stack]).lstrip('0') or '0'
        
        
        
